@use './members' as *;

/* ----------------------------
Visibility
---------------------------- */

// TODO: Check why srOnly shows visibily when it's tabbed to
.srOnly:not(:focus):not(:active) {
  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

.srOnlyMobile:not(:focus):not(:active) {
  @include for-phone-only {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
  @include for-tablet-portait-only {
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    overflow: hidden;
    position: absolute;
    white-space: nowrap;
    width: 1px;
  }
}

.hide {
  display: none;
}

.block {
  display: block;
}

.opacity100 {
  opacity: 1;
}

.noFocusOutline {
  outline: none;
}

/* ----------------------------
Layout
---------------------------- */

.pageMargin {
  margin: 0 1rem;
  @include for-tablet-portrait-up {
    margin: 0 1.5rem;
  }
}

.pagePadding {
  padding: 0 1rem;
  @include for-tablet-portrait-up {
    padding: 0 1.5rem;
  }
}

.centerMargins {
  margin: 0 auto;
}

/* ----------------------------
Text Alignment
---------------------------- */
.inline {
  display: inline;
}

.textAlignLeft {
  text-align: left;
}

.textAlignCenter {
  text-align: center;
}

.textAlignRight {
  text-align: right;
}

.textAlignJustify {
  text-align: justify;
}

/* ----------------------------
Margins and Padding
---------------------------- */
/*
Generates margin and padding helper classes in Rems.
The first letter is "m" or "p" for Margin or Padding
Second letter is "t", "b", "l", or "r" for Top, Bottom, Left, or Right
The number of spacing in pixels. Adjust the amounts generated by editing the $spaceamounts variable below.
The output unit is Rems.
ex.:  .mt48 = margin-top: 3rem;
      .pl16 = padding-left: 1rem;
*/
$spaceamounts: (
  0,
  2,
  4,
  5,
  6,
  8,
  12,
  16,
  24,
  32,
  40,
  48,
  56,
  64,
  72,
  80,
  88,
  96
); // Adjust this to include the Rem amounts you need.
$sides: (top, bottom, left, right); // Leave this variable alone

@each $space in $spaceamounts {
  $spaceRem: #{calc($space / $base-value)}rem;

  @each $side in $sides {
    .m#{str-slice($side, 0, 1)}#{$space} {
      /* prettier-ignore */
      margin-#{$side}: #{$spaceRem} !important;
    }

    .p#{str-slice($side, 0, 1)}#{$space} {
      /* prettier-ignore */
      padding-#{$side}: #{$spaceRem} !important;
    }
  }
}

// Flex box stuff

.flex {
  display: flex;
}

.flexCol {
  display: flex;
  flex-direction: column;
}

// Make the last flex item stick to the bottom of a container
.flexBottom {
  margin-top: auto !important;
}

// Spacing
.rowGap0 {
  grid-row-gap: 0;
}

// Item placement options. Default is Stretch.
.justifyStart {
  justify-self: start;
}

.justifyEnd {
  justify-self: end;
}

.justifyCenter {
  justify-self: center;
}
